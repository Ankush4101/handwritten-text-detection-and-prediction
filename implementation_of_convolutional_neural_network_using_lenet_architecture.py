# -*- coding: utf-8 -*-
"""Implementation of Convolutional Neural Network using LeNet Architecture.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19YgvdME1bgKyDgg-YpferkTu5_HjprEu
"""

from tensorflow.keras.datasets import mnist
import numpy as np

from google.colab import drive
drive.mount('/content/drive')

data = []
labels = []
for row in open('/content/drive/MyDrive/Dataset/A_Z_Handwritten_Data.csv'):

    row = row.split(",")
    label = int(row[0])
    image = np.array([int(x) for x in row[1:]], dtype="uint8")
    image = image.reshape((28, 28))
    data.append(image)
    labels.append(label)

data
labels

azdata = np.array(data, dtype="float32")
azlabels = np.array(labels, dtype="int")

((trainData, trainLabels), (testData, testLabels)) = mnist.load_data()
digitsdata = np.vstack([trainData, testData])
digitslabels = np.hstack([trainLabels, testLabels])

import keras
from keras.models import Sequential
from keras.layers import Dense , Dropout , Flatten , Conv2D , MaxPooling2D
from tensorflow.keras.optimizers import SGD
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
import numpy as np
import cv2
import pickle

azlabels += 10

data = np.vstack([azdata, digitsdata])
labels = np.hstack([azlabels, digitslabels])

(trainX, testX, trainY, testY) = train_test_split(data,labels, test_size=0.20, stratify=labels, random_state=42)

trainX=trainX.reshape(trainX.shape[0],28,28,1)
testX=testX.reshape(testX.shape[0],28,28,1)

input_shape=(28,28,1)

trainX=trainX.astype('float32')
testX=testX.astype('float32')
trainX/=255
testX/=255

trainY=keras.utils.to_categorical(trainY,36)
testY=keras.utils.to_categorical(testY,36)

model=Sequential()

model.add(Conv2D(32,(3,3),input_shape=(28,28,1),activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(64,3,3,activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(128,activation='relu'))

model.add(Dense(36,activation='sigmoid'))

model.compile(loss=keras.losses.categorical_crossentropy,optimizer='adam',
             metrics=['accuracy'])

model.fit(trainX,trainY,batch_size=128,epochs=3,verbose=1,validation_split=0.2)

!mkdir -p saved_model
model.save('/content/drive/MyDrive/Dataset/saved_model/my_model')



# import tensorflow as tf
# new_model = tf.keras.models.load_model('saved_model/my_model')



